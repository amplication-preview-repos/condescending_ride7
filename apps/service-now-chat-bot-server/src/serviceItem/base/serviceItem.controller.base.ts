/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceItemService } from "../serviceItem.service";
import { ServiceItemCreateInput } from "./ServiceItemCreateInput";
import { ServiceItem } from "./ServiceItem";
import { ServiceItemFindManyArgs } from "./ServiceItemFindManyArgs";
import { ServiceItemWhereUniqueInput } from "./ServiceItemWhereUniqueInput";
import { ServiceItemUpdateInput } from "./ServiceItemUpdateInput";

export class ServiceItemControllerBase {
  constructor(protected readonly service: ServiceItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceItem })
  async createServiceItem(
    @common.Body() data: ServiceItemCreateInput
  ): Promise<ServiceItem> {
    return await this.service.createServiceItem({
      data: {
        ...data,

        catalog: data.catalog
          ? {
              connect: data.catalog,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        itemId: true,
        name: true,
        description: true,
        price: true,

        catalog: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceItem] })
  @ApiNestedQuery(ServiceItemFindManyArgs)
  async serviceItems(@common.Req() request: Request): Promise<ServiceItem[]> {
    const args = plainToClass(ServiceItemFindManyArgs, request.query);
    return this.service.serviceItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        itemId: true,
        name: true,
        description: true,
        price: true,

        catalog: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serviceItem(
    @common.Param() params: ServiceItemWhereUniqueInput
  ): Promise<ServiceItem | null> {
    const result = await this.service.serviceItem({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        itemId: true,
        name: true,
        description: true,
        price: true,

        catalog: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServiceItem(
    @common.Param() params: ServiceItemWhereUniqueInput,
    @common.Body() data: ServiceItemUpdateInput
  ): Promise<ServiceItem | null> {
    try {
      return await this.service.updateServiceItem({
        where: params,
        data: {
          ...data,

          catalog: data.catalog
            ? {
                connect: data.catalog,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          itemId: true,
          name: true,
          description: true,
          price: true,

          catalog: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServiceItem(
    @common.Param() params: ServiceItemWhereUniqueInput
  ): Promise<ServiceItem | null> {
    try {
      return await this.service.deleteServiceItem({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          itemId: true,
          name: true,
          description: true,
          price: true,

          catalog: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
