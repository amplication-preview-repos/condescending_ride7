/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ServiceItem } from "./ServiceItem";
import { ServiceItemCountArgs } from "./ServiceItemCountArgs";
import { ServiceItemFindManyArgs } from "./ServiceItemFindManyArgs";
import { ServiceItemFindUniqueArgs } from "./ServiceItemFindUniqueArgs";
import { CreateServiceItemArgs } from "./CreateServiceItemArgs";
import { UpdateServiceItemArgs } from "./UpdateServiceItemArgs";
import { DeleteServiceItemArgs } from "./DeleteServiceItemArgs";
import { Catalog } from "../../catalog/base/Catalog";
import { ServiceItemService } from "../serviceItem.service";
@graphql.Resolver(() => ServiceItem)
export class ServiceItemResolverBase {
  constructor(protected readonly service: ServiceItemService) {}

  async _serviceItemsMeta(
    @graphql.Args() args: ServiceItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ServiceItem])
  async serviceItems(
    @graphql.Args() args: ServiceItemFindManyArgs
  ): Promise<ServiceItem[]> {
    return this.service.serviceItems(args);
  }

  @graphql.Query(() => ServiceItem, { nullable: true })
  async serviceItem(
    @graphql.Args() args: ServiceItemFindUniqueArgs
  ): Promise<ServiceItem | null> {
    const result = await this.service.serviceItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ServiceItem)
  async createServiceItem(
    @graphql.Args() args: CreateServiceItemArgs
  ): Promise<ServiceItem> {
    return await this.service.createServiceItem({
      ...args,
      data: {
        ...args.data,

        catalog: args.data.catalog
          ? {
              connect: args.data.catalog,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ServiceItem)
  async updateServiceItem(
    @graphql.Args() args: UpdateServiceItemArgs
  ): Promise<ServiceItem | null> {
    try {
      return await this.service.updateServiceItem({
        ...args,
        data: {
          ...args.data,

          catalog: args.data.catalog
            ? {
                connect: args.data.catalog,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceItem)
  async deleteServiceItem(
    @graphql.Args() args: DeleteServiceItemArgs
  ): Promise<ServiceItem | null> {
    try {
      return await this.service.deleteServiceItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Catalog, {
    nullable: true,
    name: "catalog",
  })
  async getCatalog(
    @graphql.Parent() parent: ServiceItem
  ): Promise<Catalog | null> {
    const result = await this.service.getCatalog(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
