/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ServiceItem as PrismaServiceItem,
  Catalog as PrismaCatalog,
} from "@prisma/client";

export class ServiceItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceItem.count(args);
  }

  async serviceItems(
    args: Prisma.ServiceItemFindManyArgs
  ): Promise<PrismaServiceItem[]> {
    return this.prisma.serviceItem.findMany(args);
  }
  async serviceItem(
    args: Prisma.ServiceItemFindUniqueArgs
  ): Promise<PrismaServiceItem | null> {
    return this.prisma.serviceItem.findUnique(args);
  }
  async createServiceItem(
    args: Prisma.ServiceItemCreateArgs
  ): Promise<PrismaServiceItem> {
    return this.prisma.serviceItem.create(args);
  }
  async updateServiceItem(
    args: Prisma.ServiceItemUpdateArgs
  ): Promise<PrismaServiceItem> {
    return this.prisma.serviceItem.update(args);
  }
  async deleteServiceItem(
    args: Prisma.ServiceItemDeleteArgs
  ): Promise<PrismaServiceItem> {
    return this.prisma.serviceItem.delete(args);
  }

  async getCatalog(parentId: string): Promise<PrismaCatalog | null> {
    return this.prisma.serviceItem
      .findUnique({
        where: { id: parentId },
      })
      .catalog();
  }
}
